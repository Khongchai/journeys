{"version":3,"sources":["webpack:///./src/components/LandingPageComponents/Timeline/utils/calculateThrottleValueLimit/calculateThrottleValueLimit.ts","webpack:///./src/components/LandingPageComponents/Timeline/utils/setBlackBackgroundHeight.ts","webpack:///./src/components/LandingPageComponents/Timeline/utils/handleTimelineMove.ts","webpack:///./src/components/LandingPageComponents/Timeline/utils/changeStylesOnClick.ts.ts","webpack:///./src/components/LandingPageComponents/Timeline/utils/checkIfColumnIsAvailable.ts","webpack:///./src/components/LandingPageComponents/Timeline/Timeline.js","webpack:///./src/components/LandingPageComponents/Timeline/utils/manageEventStartAndEndPosition.tsx","webpack:///./src/components/LandingPageComponents/Timeline/utils/hideTimeline.ts"],"names":["beginVal","smoothness","setBlackBackgroundHeight","eventsWrapper","document","getElementById","eventsComputedStyle","window","getComputedStyle","blackBackground","documentElement","clientWidth","navbarHeight","parseInt","getPropertyValue","style","height","calculateThrottleValueLimit","x","setCurrentDragDirection","checkDragDirection","Math","abs","moveby","pow","Number","isNaN","currentDragDirection","throttleNumber","timeline","offsetX","initialX","dragAmount","moveTimeline","offset","move","windowWidth","timelineData","absLeft","getBoundingClientRect","left","absRight","right","navBarWidth","getNavbarWidthIfInWindowMode","leftBorder","rightBorder","elemData","edgeVisible","prevDrag","handleTimelineEdges","transform","getResetValuesIfAny","resetVal","offsetLeft","start","e","type","clientX","addEventListener","stop","touches","preventDefault","resetValue","transition","setTimeout","removeEventListener","navBar","direction","activeElem","changeStyleOnClick","elem","minWidth","zIndex","backgroundColor","theme","colors","mainYellow","applyActiveStylings","applyInactiveStylings","defaultStylingFromCSSFile_color","mainMagenta","checkIfColumnIsAvailableAtRowX","endVal","rowCheck","beginningPosition","first","second","third","fourth","fifth","Timeline","props","query","useStaticQuery","frontmatterData","useRef","allMdx","edges","map","edge","node","frontmatter","useState","hideNavBarToggle","setHideNavBarToggle","setOverviewDataAndBlackBackgroundHeight","year","topic","excerpt","picture","Promise","resolve","then","setRequestedOverviewData","useEffect","eventData","allEvents","getElementsByClassName","allEventsLength","length","j","monthOffset","i","begin1","topic1month","from","begin2","topic2month","begin3","topic3month","end1","to","end2","end3","gridColumn","gridRow","changeStylesOnClick","manageEventStartAndEndPosition","current","id","onClick","setToggle","toggle","text","timelineWrapper","innerHTML","opacity","pointerEvents","data","key","topic1","className","topic1excerpt","featureImageI","childImageSharp","fluid","topic2","topic2excerpt","featureImageII","display","topic3","topic3excerpt","featureImageIII"],"mappings":"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","file":"9-af57c18eb3c5a54dcbe4.js","sourcesContent":["import {cancelDragDirectionAndThrottleNumber, setCurrentDragDirection} from \"../handleTimelineMove\";\r\n\r\nlet beginVal: number;\r\nlet smoothness: number;\r\n\r\n//Only positive even numbers, eg. 4, 7.8, 10 \r\n//Closer to 0 = slower and smoother rate of change\r\nconst SLOPE: number = 1.52;\r\n\r\nconst HORIZONTAL_SHIFT: number = 1;\r\n\r\nexport default function calculateThrottleValueLimit(x: number): number\r\n{\r\n    checkDragDirection(x);\r\n    x = Math.abs(x);\r\n    //View formula in ./formula.png\r\n    beginVal = beginVal? beginVal : x;\r\n    smoothness = beginVal / 2;\r\n    \r\n    let moveby = (-(Math.pow((x - beginVal), SLOPE)\r\n                    /(Math.pow((x - beginVal), SLOPE) + smoothness)))\r\n                    + HORIZONTAL_SHIFT; \r\n    \r\n    if (!moveby || Number.isNaN(moveby))\r\n    {\r\n        moveby = userDragsBackIn();\r\n    }\r\n    return moveby;\r\n}\r\n\r\nexport function clearBeginVal()\r\n{\r\n    //clears everytime mouse or touch is up\r\n    beginVal = null;\r\n}\r\n\r\nfunction checkDragDirection(x: number)\r\n{\r\n    if (x > 0)\r\n    {\r\n        setCurrentDragDirection(\"right\");\r\n    }\r\n    else\r\n    {\r\n        setCurrentDragDirection(\"left\");\r\n    }\r\n}\r\n\r\nfunction userDragsBackIn()\r\n{\r\n    cancelDragDirectionAndThrottleNumber();\r\n    return 1;\r\n}\r\n","export default function setBlackBackgroundHeight()\r\n{\r\n    //get the parents height minus the sibling.\r\n    //cannot get height directly because of overflow\r\n    let eventsWrapper: HTMLElement = document.getElementById(\"timeline-wrapper\");\r\n    let yearIndicator: HTMLElement = document.getElementById(\"year-indicator\");\r\n    if (eventsWrapper)\r\n    {\r\n        let eventsComputedStyle = window.getComputedStyle(eventsWrapper);\r\n        //let yearIndicatorComputedStyle = window.getComputedStyle(yearIndicator);\r\n        let blackBackground: HTMLElement = document.getElementById(\"black-background\");\r\n        let windowWidth: number = document.documentElement.clientWidth;\r\n        let currentBreakpoints: number = 600;\r\n        let extraHeight: number = 2;\r\n        //let yearIndicatorHeight = parseInt(yearIndicatorComputedStyle.getPropertyValue(\"height\"));\r\n    \r\n        if (windowWidth < currentBreakpoints)\r\n        {\r\n            let navbarHeight = parseInt(window.getComputedStyle(document.getElementById(\"navbar-wrapper\")).getPropertyValue(\"height\"));\r\n            blackBackground.style.height = `${(parseInt(eventsComputedStyle.getPropertyValue(\"height\")) + navbarHeight + extraHeight)}px`;\r\n        }\r\n        else\r\n        {\r\n            blackBackground.style.height = `${parseInt(eventsComputedStyle.getPropertyValue(\"height\"))}px` ;\r\n        }\r\n    }\r\n}","import setBlackBackgroundHeight from \"./setBlackBackgroundHeight\";\r\nimport calculateThrottleValueLimit, {clearBeginVal} from \"./calculateThrottleValueLimit/calculateThrottleValueLimit\";\r\n\r\n//TODO refactor to a class\r\n\r\nvar offsetX: number = 0;\r\nvar initialX: number = 0;\r\nvar dragAmount: number = 0; \r\nvar timeline: HTMLElement;\r\nvar throttleNumber: number = null;\r\nvar currentDragDirection: string = null;\r\n\r\nfunction moveTimeline(offset?: number)\r\n{\r\n    const move: number =  handleTimelineEdges();\r\n    timeline.style.transform = `translate3d(${offset? offset: move}px, 0, 0)`;\r\n}\r\n\r\nfunction getResetValuesIfAny(): number\r\n{\r\n    let windowWidth: number = document.documentElement.clientWidth;\r\n    let navBarWidth: number = getNavbarWidthIfInWindowMode(windowWidth);\r\n    let extraOffset: number = 0.1;\r\n    let resetVal: number;\r\n    if (currentDragDirection === \"right\")\r\n    {\r\n        resetVal = (navBarWidth - timeline.offsetLeft) - extraOffset;\r\n    }\r\n    else if (currentDragDirection === \"left\")\r\n    {\r\n        resetVal =  (timeline.offsetLeft - navBarWidth) + extraOffset;\r\n    }\r\n    else\r\n    {\r\n        resetVal = dragAmount;\r\n    }\r\n\r\n    offsetX = resetVal;\r\n    initialX = resetVal;\r\n    dragAmount = resetVal;\r\n    currentDragDirection = null;\r\n\r\n    return resetVal;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport default function handleTimelineMove()\r\n{\r\n    timeline = document.getElementById(\"timeline-wrapper\");\r\n\r\n    timeline.addEventListener(\"touchstart\", start);\r\n    timeline.addEventListener(\"touchmove\", move);\r\n    timeline.addEventListener(\"touchend\", stop);\r\n\r\n    timeline.addEventListener(\"mousedown\", start);\r\n    timeline.addEventListener(\"mouseup\", stop);\r\n}\r\n\r\nfunction start(e: any)\r\n{\r\n    if (e.type === \"mousedown\")\r\n    {\r\n        initialX = e.clientX;\r\n        timeline.addEventListener(\"mousemove\", move);\r\n        timeline.addEventListener(\"mouseleave\", stop);\r\n    }\r\n    else\r\n    {\r\n        initialX = e.touches[0].clientX;\r\n    }\r\n}\r\n\r\nfunction move(e: any)\r\n{\r\n    e.preventDefault();\r\n    dragAmount = e.type===\"mousemove\"? (e.clientX - initialX) + offsetX : (e.touches[0].clientX - initialX) + offsetX;\r\n    moveTimeline(); \r\n}\r\n\r\nfunction stop()\r\n{\r\n    if (throttleNumber)\r\n    {\r\n        offsetX = throttleNumber;\r\n        if (currentDragDirection)\r\n        {\r\n            let resetValue = getResetValuesIfAny();\r\n            timeline.style.transform = `translate3d(${resetValue}px, 0, 0)`;\r\n            timeline.style.transition = \"transform .1s\";\r\n            setTimeout(()=>\r\n            {\r\n                timeline.style.transition = \"\";\r\n            }, 100);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        offsetX = dragAmount;\r\n    }\r\n    timeline.removeEventListener(\"mousemove\", move);\r\n    timeline.removeEventListener(\"mouseleave\", stop);\r\n    throttleNumber = null;\r\n    clearBeginVal();\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function adjustElementsSizeOnResize()\r\n{\r\n    window.addEventListener(\"resize\", ()=>\r\n    {\r\n        timeline.style.transition = \"transform .2s\";\r\n        dragAmount = 0;\r\n\r\n        moveTimeline(getResetValuesIfAny());\r\n        setTimeout(() => {\r\n            timeline.style.transition = \"\";\r\n        }, 250);\r\n\r\n        setBlackBackgroundHeight();\r\n\r\n    });\r\n    \r\n}\r\n\r\n//This function deals with the left and right side of the timeline and locks the drag to only the beginning and the end.\r\nvar prevDrag: number = null;\r\nfunction handleTimelineEdges()\r\n{\r\n    let windowWidth: number = document.documentElement.clientWidth;\r\n    let timelineData = {\r\n        absLeft: timeline.getBoundingClientRect().left,\r\n        absRight: timeline.getBoundingClientRect().right,\r\n    };\r\n    let navBarWidth: number = getNavbarWidthIfInWindowMode(windowWidth)\r\n    let windowLeftBorder: number = navBarWidth + (navBarWidth - timelineData.absLeft);\r\n    let windowRightBorder: number = windowWidth;\r\n\r\n    //actions here\r\n    if (edgeVisible(windowLeftBorder, windowRightBorder, timelineData) || throttleNumber)\r\n    {\r\n        if (throttleNumber)\r\n        {\r\n            //user drags to the right.\r\n            if (prevDrag < dragAmount)\r\n            {\r\n                //currentDragDirection = currentDragDirection? currentDragDirection: \"right\";\r\n                throttleNumber = throttleNumber + calculateThrottleValueLimit(throttleNumber);\r\n                \r\n            }\r\n            //user drags to the left.\r\n            else if (dragAmount < prevDrag)\r\n            {\r\n                //currentDragDirection = currentDragDirection? currentDragDirection: \"left\";\r\n                throttleNumber = throttleNumber - calculateThrottleValueLimit(throttleNumber);\r\n            } \r\n            //NaN happens when user drags back in \r\n        }\r\n        else\r\n        {\r\n            throttleNumber = dragAmount;\r\n        }        \r\n        prevDrag = dragAmount;\r\n        \r\n        return throttleNumber;\r\n    }\r\n    return dragAmount;\r\n\r\n}\r\n\r\nfunction getNavbarWidthIfInWindowMode(windowWidth: number): number\r\n{\r\n    //refer to \"themes\" for media queries\r\n    let smallDevicesBreakpoint = 600;\r\n    let navBar: HTMLElement = document.getElementById(\"navbar-wrapper\");\r\n    let navBarWidth: number = parseInt(window.getComputedStyle(navBar).getPropertyValue(\"width\"));\r\n    \r\n    return windowWidth > smallDevicesBreakpoint? navBarWidth: 0;\r\n}\r\n\r\nfunction edgeVisible(leftBorder: number, rightBorder: number, elemData: {absLeft: number, absRight: number}): boolean\r\n{\r\n    if (elemData.absLeft > leftBorder)\r\n    {\r\n        return true;\r\n    }\r\n    if (elemData.absRight < rightBorder)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function cancelDragDirectionAndThrottleNumber()\r\n{\r\n    currentDragDirection = null;\r\n    throttleNumber = null;\r\n}\r\n\r\nexport function setCurrentDragDirection(direction: string)\r\n{\r\n    currentDragDirection = direction;\r\n}\r\n\r\n\r\n","import theme from \"../../../../themes/theme\";\r\n\r\nvar activeElem: HTMLElement;\r\n\r\nexport default function changeStyleOnClick(elem: HTMLElement)\r\n{\r\n    elem.addEventListener(\"click\", () => \r\n    {\r\n        //if the active element is not the clicked element\r\n        if (activeElem !== elem)\r\n        {\r\n            applyActiveStylings(elem);\r\n\r\n            //if there exist another active element, reset its stylings\r\n            if (activeElem) \r\n            {\r\n                applyInactiveStylings(activeElem);\r\n            }\r\n            \r\n            activeElem = elem;\r\n        }\r\n        else\r\n        {\r\n            applyInactiveStylings(elem);\r\n            activeElem = null;\r\n        }\r\n    });\r\n}\r\n\r\nfunction applyActiveStylings(elem: HTMLElement)\r\n{\r\n    elem.style.minWidth = \"16rem\";\r\n    elem.style.zIndex = \"100\";\r\n    elem.style.backgroundColor = theme.colors.mainYellow;\r\n}\r\n\r\nfunction applyInactiveStylings(elem: HTMLElement)\r\n{\r\n    let defaultStylingFromCSSFile_minWidth: string = \"3rem\";\r\n    let defaultStylingFromCSSFile_zIndex: string = \"0\";\r\n    let defaultStylingFromCSSFile_color: string = theme.colors.mainMagenta;\r\n\r\n    elem.style.minWidth = defaultStylingFromCSSFile_minWidth;\r\n    elem.style.zIndex = defaultStylingFromCSSFile_zIndex;\r\n    elem.style.backgroundColor = defaultStylingFromCSSFile_color;\r\n}\r\n","export default function checkIfColumnIsAvailableAtRowX(beginVal: number, endVal: number, rowCheck: {\r\n                                                                                    first: number,\r\n                                                                                    second: number,\r\n                                                                                    third: number,\r\n                                                                                    fourth: number,\r\n                                                                                    fifth: number,})\r\n{\r\n    let beginningPosition;\r\n    if (beginVal > rowCheck.first)\r\n    {\r\n        beginningPosition = \"1\";\r\n        rowCheck.first = endVal;\r\n    }\r\n    else if (beginVal > rowCheck.second)\r\n    {\r\n        beginningPosition = \"2\";\r\n        rowCheck.second = endVal;\r\n    }\r\n    else if (beginVal > rowCheck.third)\r\n    {\r\n        beginningPosition = \"3\";\r\n        rowCheck.third = endVal;\r\n    }\r\n    else if (beginVal > rowCheck.fourth)\r\n    {\r\n        beginningPosition = \"4\";\r\n        rowCheck.fourth = endVal;\r\n    }\r\n    else\r\n    {\r\n        beginningPosition = \"5\";\r\n        rowCheck.fifth = endVal;\r\n    }\r\n\r\n    return beginningPosition;\r\n}\r\n","import {TimelineWrapper, YearIndicator, EventsWrapper, HideTimeline, BlackBackground} from \"../../../elements\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useStaticQuery, graphql} from \"gatsby\";\r\nimport hideTimeline from \"./utils/hideTimeline.ts\";\r\nimport handleTimelineMove, {adjustElementsSizeOnResize} from \"./utils/handleTimelineMove\";\r\nimport setBlackBackgroundHeight from \"./utils/setBlackBackgroundHeight\";\r\nimport manageEventStartAndEndPosition from \"./utils/manageEventStartAndEndPosition\";\r\nimport \"animate.css\";\r\n\r\nexport default function Timeline(props)\r\n{\r\n    const query = useStaticQuery(graphql`\r\n        query\r\n        {\r\n            allMdx(filter: {frontmatter: {type: {eq: \"static\"}}}, sort:{order: ASC, fields: frontmatter___year}) \r\n            {\r\n                edges \r\n                {\r\n                    node \r\n                    {\r\n                        frontmatter \r\n                        {\r\n                            featureImageI\r\n                            {\r\n                                childImageSharp {\r\n                                  fluid \r\n                                  {\r\n                                   ...GatsbyImageSharpFluid_tracedSVG\r\n                                  }\r\n                                }\r\n                            }\r\n                            featureImageII\r\n                            {\r\n                                childImageSharp {\r\n                                  fluid {\r\n                                    ...GatsbyImageSharpFluid_tracedSVG\r\n                                  }\r\n                                }\r\n                            }\r\n                            featureImageIII\r\n                            {\r\n                                \r\n                                childImageSharp {\r\n                                  fluid {\r\n                                    ...GatsbyImageSharpFluid_tracedSVG\r\n                                  }\r\n                                }\r\n                            }\r\n                            year\r\n                            slug\r\n                            topic1\r\n                            topic2\r\n                            topic3\r\n                            topic1excerpt\r\n                            topic2excerpt\r\n                            topic3excerpt\r\n                            topic1month\r\n                            {\r\n                                from\r\n                                to\r\n                            }\r\n                            topic2month\r\n                            {\r\n                                from\r\n                                to\r\n                            }\r\n                            topic3month\r\n                            {\r\n                                from\r\n                                to\r\n                            }\r\n                            type\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n    //store this in useRef\r\n    const frontmatterData = useRef(query.allMdx.edges.map(edge => edge.node.frontmatter));\r\n    const [hideNavBarToggle, setHideNavBarToggle] = useState(true);\r\n\r\n    useEffect(() => \r\n    {   \r\n        manageEventStartAndEndPosition(frontmatterData.current);\r\n        handleTimelineMove();\r\n        setBlackBackgroundHeight();\r\n        adjustElementsSizeOnResize();\r\n    }, []);\r\n\r\n    function setOverviewDataAndBlackBackgroundHeight(year, topic, excerpt, picture)\r\n    {\r\n        Promise.resolve()\r\n        .then(()=>\r\n        {\r\n            props.setRequestedOverviewData({year, topic, excerpt, picture});\r\n        })\r\n        .then(()=>\r\n        {\r\n            setBlackBackgroundHeight();\r\n        });\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <BlackBackground id=\"black-background\"/>\r\n            <HideTimeline id=\"hide-timeline-text\" onClick={()=>hideTimeline(setHideNavBarToggle, hideNavBarToggle)} >Hide Timeline</HideTimeline>\r\n            <TimelineWrapper id=\"timeline-wrapper\">\r\n                <YearIndicator id=\"year-indicator\">\r\n                    {frontmatterData.current.map(data => \r\n                            <h5 >\r\n                                {data.year}\r\n                            </h5>) \r\n                                }\r\n                </YearIndicator>\r\n                <EventsWrapper id=\"events-wrapper\">\r\n                    {frontmatterData.current.map(data => {\r\n                        //check null for featureImage using ternary or maybe not pass id, just pass the image\r\n                        return(\r\n                            <>\r\n                                <span key={data.topic1} className=\"event\" onClick={()=>setOverviewDataAndBlackBackgroundHeight(data.year, data.topic1, \r\n                                data.topic1excerpt, data.featureImageI? \r\n                                data.featureImageI.childImageSharp.fluid: null)\r\n                                }>\r\n                                    <p>{data.topic1}</p>\r\n                                </span>\r\n                                {\r\n                                !data.topic2? <span className=\"event empty-placeholder\" style={{display: \"none\"}}></span>:\r\n                                    <span key={data.topic2} \r\n                                    onClick={()=>setOverviewDataAndBlackBackgroundHeight(data.year, data.topic2, \r\n                                    data.topic2excerpt, data.featureImageII? data.featureImageII.childImageSharp.fluid: null\r\n                                    )} className=\"event\">\r\n                                        <p>{data.topic2}</p>\r\n                                    </span>\r\n                                }\r\n                                {\r\n                                !data.topic3? <span className=\"event empty-placeholder\" style={{display: \"none\"}}></span>:\r\n                                    <span key={data.topic3} onClick={()=>setOverviewDataAndBlackBackgroundHeight(data.year, data.topic3, data.topic3excerpt, \r\n                                    data.featureImageIII? data.featureImageIII.childImageSharp.fluid: null)} className=\"event\">\r\n                                        <p>{data.topic3}</p>\r\n                                    </span>\r\n                                }\r\n                            </>\r\n                        )\r\n                    })}\r\n                </EventsWrapper>\r\n            </TimelineWrapper>\r\n        \r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n\r\n","import changeStylesOnClick from \"../utils/changeStylesOnClick.ts\";\r\nimport checkIfColumnIsAvailableAtRowX from \"../utils/checkIfColumnIsAvailable\";\r\n\r\nexport default function manageEventStartAndEndPosition(eventData: Array<any>)\r\n{\r\n\r\n    let allEvents = document.getElementsByClassName(\"event\") as HTMLCollectionOf<HTMLElement>;\r\n    let allEventsLength = allEvents.length;\r\n    let topicPerNode = 3;\r\n\r\n    //for managing columns\r\n    let j = 0;\r\n    let monthOffset = 0;\r\n\r\n    //for managing rows\r\n    let rowCheck = {\r\n        first: 0,\r\n        second: 0,\r\n        third: 0,\r\n        fourth: 0,\r\n        fifth: 0,\r\n    };\r\n\r\n    for (let i = 0; i < allEventsLength; i+=topicPerNode)\r\n    {\r\n        let begin1 = eventData[j].topic1month.from + monthOffset;\r\n        let begin2 = eventData[j].topic2month.from + monthOffset;\r\n        let begin3 = eventData[j].topic3month.from + monthOffset;\r\n\r\n        let end1 = eventData[j].topic1month.to + monthOffset;\r\n        let end2 = eventData[j].topic2month.to + monthOffset;\r\n        let end3 = eventData[j].topic3month.to + monthOffset;\r\n\r\n        //manage column\r\n        allEvents[i].style.gridColumn = `${begin1} / ${end1}`;\r\n        allEvents[i+1].style.gridColumn = `${begin2} / ${end2}`;\r\n        allEvents[i+2].style.gridColumn = `${begin3} / ${end3}`;\r\n\r\n        //manage row\r\n        allEvents[i].style.gridRow = checkIfColumnIsAvailableAtRowX(begin1, end1, rowCheck);\r\n        allEvents[i+1].style.gridRow = checkIfColumnIsAvailableAtRowX(begin2, end2, rowCheck);\r\n        allEvents[i+2].style.gridRow = checkIfColumnIsAvailableAtRowX(begin3, end3, rowCheck);\r\n\r\n        //change styling on click\r\n        changeStylesOnClick(allEvents[i]);\r\n        changeStylesOnClick(allEvents[i + 1]);\r\n        changeStylesOnClick(allEvents[i + 2]);\r\n\r\n        monthOffset += 12;\r\n        j++;\r\n\r\n    }\r\n    //give grid column property for each member of the \"event\" class based on the topic\r\n\r\n}","import setBlackBackgroundHeight from \"./setBlackBackgroundHeight\";\r\n\r\nlet navbarHeight: number; \r\n\r\nexport default function hideTimeline(setToggle: Function, toggle: boolean)\r\n{\r\n    let text: HTMLElement = document.getElementById(\"hide-timeline-text\");\r\n    let timelineWrapper: HTMLElement = document.getElementById(\"timeline-wrapper\");\r\n    let blackBackground: HTMLElement = document.getElementById(\"black-background\");\r\n    let transitionVal: number = 15;\r\n\r\n    //wait time should correspond to the transition value\r\n    let waitTime: number = 150;\r\n\r\n    if (toggle)\r\n    {\r\n        text.innerHTML = \"Show Timeline\";\r\n\r\n        timelineWrapper.style.opacity = \"0\";\r\n        timelineWrapper.style.transition = `opacity .${transitionVal}s`;\r\n\r\n        blackBackground.style.opacity = \"0\";\r\n        blackBackground.style.transition = `opacity .${transitionVal}s`;\r\n\r\n        timelineWrapper.style.pointerEvents = \"none\";\r\n\r\n        setToggle(false);   \r\n    }\r\n    else\r\n    {\r\n        text.innerHTML = \"Hide Timeline\";\r\n\r\n        timelineWrapper.style.opacity = \"1\";\r\n        timelineWrapper.style.pointerEvents = \"\";\r\n\r\n        blackBackground.style.transition = \"\";\r\n        blackBackground.style.opacity = \"1\";\r\n\r\n        timelineWrapper.style.pointerEvents = \"auto\";\r\n        \r\n        setToggle(true);   \r\n    }\r\n}"],"sourceRoot":""}